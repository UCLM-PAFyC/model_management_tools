# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ModelManagementToolsDockWidget
                                 A QGIS plugin
 A plugin for manage models
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2019-06-13
        git sha              : $Format:%H$
        copyright            : (C) 2019 by David Hernandez Lopez, Universidad de Castilla-La Mancha
        email                : david.hernandez@uclm.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

# dhl
import sys,os
from osgeo import osr
from decimal import Decimal
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QFileInfo, QDir, QObject
from PyQt5.QtWidgets import QMessageBox,QFileDialog,QTabWidget,QInputDialog,QLineEdit
from PyQt5.QtWidgets import QDockWidget
from qgis.core import QgsApplication, QgsDataSourceUri
# pluginsPath = QFileInfo(QgsApplication.qgisUserDatabaseFilePath()).path()
# pluginPath = os.path.dirname(os.path.realpath(__file__))
# pluginPath = os.path.join(pluginsPath, pluginPath)
# libCppPath = os.path.join(pluginPath, 'libCpp')
# existsPluginPath = QDir(libCppPath).exists()
# sys.path.append(pluginPath)
# sys.path.append(libCppPath)
# os.environ["PATH"] += os.pathsep + libCppPath
# from libCpp.libPyModelManagementTools import IPyModelManagementToolsProject
from .multipleFileSelectorDialog.multiple_file_selector_dialog import * #panel nueva camara
from .reports.Report import *
# import MMTDefinitions
from . import MMTDefinitions
#  dhl

import os

from math import floor
import re

from PyQt5 import QtGui, QtWidgets, uic
from PyQt5.QtCore import pyqtSignal

from qgis import utils

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'model_management_tools_dockwidget_base.ui'))

class ModelManagementToolsDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self,
                 iface,
                 projVersionMajor,
                 pluginPath,
                 libCppPath,
                 currentPluginName,
                 settings,
                 iPyProject,
                 parent=None):
        """Constructor."""
        super(ModelManagementToolsDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setWindowTitle(MMTDefinitions.CONST_PROGRAM_NAME)
        self.iface = iface
        self.projVersionMajor = projVersionMajor
        self.path_plugin = pluginPath
        self.path_libCpp = libCppPath
        self.current_plugin_name = currentPluginName
        self.settings = settings
        self.iPyProject = iPyProject
        self.isModelManagementPlugin = False
        self.plugin_name = None
        self.referenceLayer = None
        if self.current_plugin_name == MMTDefinitions.CONST_SETTINGS_PLUGIN_NAME:
            self.isModelManagementPlugin = True
            self.plugin_name = MMTDefinitions.CONST_SETTINGS_PLUGIN_NAME
        self.setupUi(self)
        self.pluginPointCloudToolsInstance = utils.plugins['point_cloud_tools']
        self.pluginPhotogrammetryToolsInstance = utils.plugins['photogrammetry_tools']
        self.initialize()

        #### depuracion report
        # report = Report(self.iface,self.path_plugin)
        # reportType = 'PhHotspot'
        # reportSucess, strError = report.initialize(reportType)
        # if not reportSucess:
        #     msgBox = QMessageBox(self)
        #     msgBox.setIcon(QMessageBox.Information)
        #     msgBox.setWindowTitle(self.windowTitle)
        #     msgBox.setText(strError)
        #     msgBox.exec_()
        #     return

        ####

    def addPhotogrammetryConnection(self):
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        items = []
        items.append(MMTDefinitions.CONST_NO_COMBO_SELECT)
        self.getPhotogrammetrySpatialiteConnections()
        for connection in self.photogrammetryConnections.keys():
            if not connection in self.photogrammetryConnectionsInProject:
                items.append(connection)
        item, ok = QInputDialog.getItem(self, "Select Photogrammetry Project",
                                    "Photogrammetry Project:", items, 0, False)
        if ok and item:
            if item == MMTDefinitions.CONST_NO_COMBO_SELECT:
                return
            connectionName = item
            photogrammetrySpatialiteDbFileName = self.photogrammetryConnections[connectionName]
            ret = self.iPyProject.mmtAddPhotogrammetryDb(dbFileName,
                                                         photogrammetrySpatialiteDbFileName)
            if ret[0] == "False":
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Error:\n"+ret[1])
                msgBox.exec_()
                return
            else:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Process completed successfully")
                msgBox.exec_()
            self.photogrammetryConnectionsInProject[connectionName] = photogrammetrySpatialiteDbFileName
            self.photogrammetriesComboBox.clear()
            self.photogrammetriesComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
            for photogrammetryConnectionInProject in self.photogrammetryConnectionsInProject.keys():
                self.photogrammetriesComboBox.addItem(photogrammetryConnectionInProject)
        return

    def addPointCloudConnection(self):
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        items = []
        items.append(MMTDefinitions.CONST_NO_COMBO_SELECT)
        self.getPointCloudSpatialiteConnections()
        for pointCloudConnection in self.pointCloudConnections.keys():
            if not pointCloudConnection in self.pointCloudConnectionsInProject:
                items.append(pointCloudConnection)
        item, ok = QInputDialog.getItem(self, "Select Point Cloud",
                                    "Point Cloud:", items, 0, False)
        if ok and item:
            if item == MMTDefinitions.CONST_NO_COMBO_SELECT:
                return
            connectionName = item
            pointCloudSpatialiteDbFileName = self.pointCloudConnections[connectionName]
            ret = self.iPyProject.mmtAddPointCloudDb(dbFileName,
                                                     pointCloudSpatialiteDbFileName)
            if ret[0] == "False":
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Error:\n"+ret[1])
                msgBox.exec_()
                return
            else:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Process completed successfully")
                msgBox.exec_()
            self.pointCloudConnectionsInProject[connectionName] = pointCloudSpatialiteDbFileName
            self.pointCloudsComboBox.clear()
            self.pointCloudsComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
            for pointCloudConnectionInProject in self.pointCloudConnectionsInProject.keys():
                self.pointCloudsComboBox.addItem(pointCloudConnectionInProject)
        return

    def addPowerlinesFromShpProcess(self):
        altitudeIsMsl = True
        if self.plsfAltitudeEllipsoidRadioButton.isChecked():
            altitudeIsMsl = False
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        if len(self.powerlinesFiles) == 0:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select power lines files")
            msgBox.exec_()
            return
        strPowerlinesFiles = ''
        cont = 0
        for powerlineFile in self.powerlinesFiles:
            if cont > 0:
                strPowerlinesFiles = strPowerlinesFiles + self.parametersFromPythonStringSeparator
            strPowerlinesFiles = strPowerlinesFiles + powerlineFile
            cont = cont + 1
        strPowerlinesNameInput = ""
        if self.plsfNameInputRadioButton.isChecked():
            strPowerlinesNameInput = self.plsfNameInputLineEdit.text()
            if not strPowerlinesNameInput:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Input name for powerlines")
                msgBox.exec_()
                return
        strPowerlinesFieldName = ""
        if self.plsfNameFieldRadioButton.isChecked():
            strPowerlinesFieldName = self.plsfNameFieldLineEdit.text()
            if not strPowerlinesFieldName:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Input field name for powerlines")
                msgBox.exec_()
                return
        strMinimumDistanceBetweenElectricPylons = self.plsfElectricPylonsMinimumDistanceLineEdit.text()
        if not strMinimumDistanceBetweenElectricPylons:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select minimum distance between electric pylons")
            msgBox.exec_()
            return
        strElectricPylonsBaseRadius = self.plsfElectricPylonsBaseRadiusLineEdit.text()
        if not strElectricPylonsBaseRadius:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select electric pylons base radius")
            msgBox.exec_()
            return
        strElectricPylonsHeight = self.plsfElectricPylonsHeightLineEdit.text()
        if not strElectricPylonsHeight:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select electric pylons height")
            msgBox.exec_()
            return
        ret = self.iPyProject.mmtAddPowerlinesFiles(dbFileName,
                                                    altitudeIsMsl,
                                                    strPowerlinesNameInput,
                                                    strPowerlinesFiles,
                                                    strPowerlinesFieldName,
                                                    strMinimumDistanceBetweenElectricPylons,
                                                    strElectricPylonsBaseRadius,
                                                    strElectricPylonsHeight)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            return
        else:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Process completed successfully")
            msgBox.exec_()
        if self.projectType.lower() == MMTDefinitions.CONST_PROJECT_TYPE_POWERLINE.lower():
            self.loadElectricPylonsLayer()
            self.loadElectricPylonsConnectionsLayer()
        return

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()

    def closeProject(self):
        if not self.dbFileName:
            return
        self.openProjectPushButton.setEnabled(False)
        self.closeProjectPushButton.setEnabled(False)
        # delete project in ram??
        root = QgsProject.instance().layerTreeRoot()
        self.removeGroup(root,self.layerTreeProjectName)
        self.dbFileName = None
        self.layerTreeProjectName = None
        self.layerTreeProject = None
        # self.layerTreePCTilesName = None
        # self.layerTreePCTiles = None
        self.projectsComboBox.setEnabled(True)
        self.projectsComboBox.setCurrentIndex(0)
        self.iface.mapCanvas().refresh()
        self.processingToolsPage.setEnabled(False)
        self.pointCloudsComboBox.clear()
        self.processCommandComboBox.clear()
        self.pvAnomaliesVLayer = None
        self.pvAnomaliesPanelsVLayer = None
        return

    def createProject(self):
        projectType = self.projectTypeComboBox.currentText()
        if projectType == MMTDefinitions.CONST_NO_COMBO_SELECT:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select project type")
            msgBox.exec_()
            return
        crs = self.projectQgsProjectionSelectionWidget.crs()
        isValidCrs = crs.isValid()
        crsAuthId = crs.authid()
        if not "EPSG:" in crsAuthId:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Selected CRS is not EPSG")
            msgBox.exec_()
            return
        crsEpsgCode = int(crsAuthId.replace('EPSG:',''))
        crsOsr = osr.SpatialReference()  # define test1
        if crsOsr.ImportFromEPSG(crsEpsgCode) != 0:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error importing OSR CRS from EPSG code" + str(crsEpsgCode))
            msgBox.exec_()
            return
        if not crsOsr.IsProjected():
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Selected CRS is not a projected CRS")
            msgBox.exec_()
            return
        altitudeIsMsl = True
        if self.projectAltitudeEllipsoidRadioButton.isChecked():
            altitudeIsMsl = False
        dbFileName = self.databaseLineEdit.text()
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        strRoisShapefiles = ''
        cont = 0
        for roiShapefile in self.roisShapefiles:
            if cont > 0:
                strRoisShapefiles = strRoisShapefiles + self.parametersFromPythonStringSeparator
            strRoisShapefiles = strRoisShapefiles + roiShapefile
            cont = cont + 1
        ret = self.iPyProject.mmtCreateProject(dbFileName,
                                               projectType,
                                               crsEpsgCode,
                                               altitudeIsMsl,
                                               strRoisShapefiles)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            return
        connectionName = QFileInfo(dbFileName).fileName()
        con = [connectionName, dbFileName]
        QSettings().setValue("SpatiaLite/connections/%s/sqlitepath" % (con[0]), con[1])
        self.iface.reloadConnections()
        self.getModelManagementSpatialiteConnections()
        msgBox = QMessageBox(self)
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setWindowTitle(self.windowTitle)
        msgBox.setText("Process completed successfully")
        msgBox.exec_()
        return

    def getModelManagementSpatialiteConnections(self):
        self.modelManagementConnections = {}
        settings = QSettings()
        settings.beginGroup('/SpatiaLite/connections')
        list_str_keys = settings.allKeys()
        paths = []
        for key in list_str_keys:
            if key!= 'selected':
                paths.append(settings.value(key))
        ret = self.iPyProject.getModelDbSpatialiteDbs(paths)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n" + ret[1])
            msgBox.exec_()
            self.pmTemporalPathLineEdit.setText("")
            self.projectManagerTemporalPath = None
            return
        connectionNames = settings.childGroups()
        cont = 0
        for connectionName in connectionNames:
            path = paths[cont]
            if path in ret:
                self.modelManagementConnections[connectionName] = paths[cont]
            cont = cont + 1
        self.projectsComboBox.clear()
        self.projectsComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
        for connection in self.modelManagementConnections.keys():
            self.projectsComboBox.addItem(connection)
        return

    def getCommands(self):
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        ret = self.iPyProject.mmtGetCommands(dbFileName)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n" + ret[1])
            msgBox.exec_()
            return
        commands = []
        cont = 0
        for value in ret:
            if cont > 0:
                commands.append(value)
            cont = cont + 1
        self.processCommandComboBox.clear()
        self.processCommandComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
        for pointCloudCommand in commands:
            self.processCommandComboBox.addItem(pointCloudCommand)
        return

    def getPhotogrammetrySpatialiteConnections(self):
        self.photogrammetryConnections = {}
        settings = QSettings()
        settings.beginGroup('/SpatiaLite/connections')
        list_str_keys = settings.allKeys()
        paths = []
        for key in list_str_keys:
            paths.append(settings.value(key))
        ret = self.iPyProject.getPhotogrammetrySpatialiteDbs(paths)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n" + ret[1])
            msgBox.exec_()
            self.pmTemporalPathLineEdit.setText("")
            self.projectManagerTemporalPath = None
            return
        connectionNames = settings.childGroups()
        cont = 0
        for connectionName in connectionNames:
            path = paths[cont]
            if path in ret:
                self.photogrammetryConnections[connectionName] = paths[cont]
            cont = cont + 1
        # self.pointCloudsComboBox.clear()
        # self.pointCloudsComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
        # for pointCloudConnection in self.pointCloudConnections.keys():
        #     self.pointCloudsComboBox.addItem(pointCloudConnection)
        # return

    def getPointCloudSpatialiteConnections(self):
        self.pointCloudConnections = {}
        settings = QSettings()
        settings.beginGroup('/SpatiaLite/connections')
        list_str_keys = settings.allKeys()
        paths = []
        for key in list_str_keys:
            paths.append(settings.value(key))
        ret = self.iPyProject.getPointCloudSpatialiteDbs(paths)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n" + ret[1])
            msgBox.exec_()
            self.pmTemporalPathLineEdit.setText("")
            self.projectManagerTemporalPath = None
            return
        connectionNames = settings.childGroups()
        cont = 0
        for connectionName in connectionNames:
            path = paths[cont]
            if path in ret:
                self.pointCloudConnections[connectionName] = paths[cont]
            cont = cont + 1
        # self.pointCloudsComboBox.clear()
        # self.pointCloudsComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
        # for pointCloudConnection in self.pointCloudConnections.keys():
        #     self.pointCloudsComboBox.addItem(pointCloudConnection)
        # return

    def getPhotogrammetrySpatialiteConnectionsInProject(self):
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        self.photogrammetryConnectionsInProject = {}
        ret = self.iPyProject.mmtGetPhotogrammetrySpatialiteDbsInProject(dbFileName)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n" + ret[1])
            msgBox.exec_()
            return
        self.getPhotogrammetrySpatialiteConnections()
        for photogrammetryConnection in self.photogrammetryConnections.keys():
            path = self.photogrammetryConnections[photogrammetryConnection]
            if path in ret:
                self.photogrammetryConnectionsInProject[photogrammetryConnection] = path
        self.photogrammetriesComboBox.clear()
        self.photogrammetriesComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
        for photogrammetryConnectionInProject in self.photogrammetryConnectionsInProject.keys():
            self.photogrammetriesComboBox.addItem(photogrammetryConnectionInProject)
        return

    def getPointCloudSpatialiteConnectionsInProject(self):
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        self.pointCloudConnectionsInProject = {}
        ret = self.iPyProject.mmtGetPointCloudSpatialiteDbsInProject(dbFileName)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n" + ret[1])
            msgBox.exec_()
            return
        self.getPointCloudSpatialiteConnections()
        for pointCloudConnection in self.pointCloudConnections.keys():
            path = self.pointCloudConnections[pointCloudConnection]
            if path in ret:
                self.pointCloudConnectionsInProject[pointCloudConnection] = path
        self.pointCloudsComboBox.clear()
        self.pointCloudsComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
        for pointCloudConnectionInProject in self.pointCloudConnectionsInProject.keys():
            self.pointCloudsComboBox.addItem(pointCloudConnectionInProject)
        return

    def initialize(self):
        self.num_format = re.compile(r'^\-?[1-9][0-9]*\.?[0-9]*')
        self.dbFileName = None
        self.layerTreeName = None
        self.layerTree = None
        self.projectType = None
        self.modelManagementConnections = {}
        self.pointCloudConnections = {}
        self.pointCloudConnectionsInProject = {}
        self.photogrammetryConnections = {}
        self.photogrammetryConnectionsInProject = {}
        self.imageFileNamesByHotspotName = {}
        self.imageFileNamesByPanelByHotspotName = {}
        # self.path_plugin = pluginPath
        # self.path_libCpp = libCppPath
        self.windowTitle = MMTDefinitions.CONST_PROGRAM_NAME
        # path_file_qsettings = self.path_plugin + '/' + MMTDefinitions.CONST_SETTINGS_FILE_NAME
        # self.settings = QSettings(path_file_qsettings,QSettings.IniFormat)
        self.path = self.settings.value("last_path")
        if not self.path:
            self.path = QDir.currentPath()
            self.settings.setValue("last_path",self.path)
            self.settings.sync()

        self.projectManagerTemporalPath = self.settings.value("project_management_temporal_path")
        auxDir = QDir(self.path)
        if not self.projectManagerTemporalPath or not auxDir.exists(self.projectManagerTemporalPath):
            self.projectManagerTemporalPath = self.path_libCpp + MMTDefinitions.CONST_PROJECT_MANAGEMENT_TEMPORAL_PATH
            self.settings.setValue("project_management_temporal_path", self.projectManagerTemporalPath)
            self.settings.sync()
        self.pmTemporalPathLineEdit.setText(self.projectManagerTemporalPath)

        self.projectManagerOutputPath = self.settings.value("project_management_output_path")
        auxDir = QDir(self.path)
        if not self.projectManagerOutputPath or not auxDir.exists(self.projectManagerOutputPath):
            self.projectManagerOutputPath = self.path_libCpp + MMTDefinitions.CONST_PROJECT_MANAGEMENT_OUTPUT_PATH
            self.settings.setValue("project_management_output_path", self.projectManagerOutputPath)
            self.settings.sync()
        self.pmOutputPathLineEdit.setText(self.projectManagerOutputPath)

        qs = QSettings()
        spatialiteConnections = qs.value("SpatiaLite/connections")

        # template path que cuelga del directorio de este fichero
        pluginsPath = QFileInfo(QgsApplication.qgisUserDatabaseFilePath()).path()
        thisFilePath = os.path.dirname(os.path.realpath(__file__))
        thisFilePath = os.path.join(pluginsPath, thisFilePath)
        # templatePath = os.path.join(thisFilePath, PCTDefinitions.CONST_TEMPLATE_PATH)
        self.templatePath = thisFilePath + MMTDefinitions.CONST_TEMPLATE_PATH
        svg_paths = qs.value('svg/searchPathsForSVG')
        # if self.templatePath not in svg_paths:
            # qs.setValue('svg/searchPathsForSVG', svg_paths + [self.templatePath])
        qs.setValue('svg/searchPathsForSVG', self.templatePath)
        # if not svg_paths:
            # qs.setValue('svg/searchPathsForSVG', self.templatePath)
        # else:
            # qs.setValue('svg/searchPathsForSVG', svg_paths + [self.templatePath])

        # self.qmlPointCloudFileName = self.templatePath + PCTDefinitions.CONST_SYMBOLOGY_POINT_CLOUD_TEMPLATE
        # self.qmlTilesFileName = self.templatePath + PTDefinitions.CONST_SYMBOLOGY_TILES_TEMPLATE
        self.qmlRoisFileName = self.templatePath + MMTDefinitions.CONST_SYMBOLOGY_ROIS_TEMPLATE
        # self.qmlImagesPcFileName = self.templatePath + PTDefinitions.CONST_SYMBOLOGY_IMAGES_PC
        self.qmlElectricPylonsFileName = self.templatePath + MMTDefinitions.CONST_SYMBOLOGY_ELECTRIC_PYLONS_TEMPLATE
        self.qmlElectricPylonsConnectionsFileName = self.templatePath + MMTDefinitions.CONST_SYMBOLOGY_ELECTRIC_PYLONS_CONNECTIONS_TEMPLATE
        self.qmlPhotovoltaicArrayPanelsFileName = self.templatePath + MMTDefinitions.CONST_SYMBOLOGY_PHOTOVOLTAIC_ARRAY_PANELS_TEMPLATE
        self.qmlPhotovoltaicPanelsFileName = self.templatePath + MMTDefinitions.CONST_SYMBOLOGY_PHOTOVOLTAIC_PANELS_TEMPLATE
        self.qmlPhotovoltaicAnomaliesFileName = self.templatePath + MMTDefinitions.CONST_SYMBOLOGY_PHOTOVOLTAIC_ANOMALIES_TEMPLATE
        self.qmlPhotovoltaicAnomaliesPanelsFileName = self.templatePath + MMTDefinitions.CONST_SYMBOLOGY_PHOTOVOLTAIC_ANOMALIES_PANELS_TEMPLATE
        self.qmlHazardAreasTypes = self.templatePath + MMTDefinitions.CONST_SYMBOLOGY_HAZARD_AREAS_TYPES_TEMPLATE
        self.qmlHazardAreasDistances = self.templatePath + MMTDefinitions.CONST_SYMBOLOGY_HAZARD_AREAS_DISTANCES_TEMPLATE
        self.qmlHazardAreasFalls = self.templatePath + MMTDefinitions.CONST_SYMBOLOGY_HAZARD_AREAS_FALLS_TEMPLATE
        self.qmlHazardAreasHeights = self.templatePath + MMTDefinitions.CONST_SYMBOLOGY_HAZARD_AREAS_HEIGHTS_TEMPLATE
        ret = self.iPyProject.setModelDbManager()
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            return

        ret = self.iPyProject.setPointCloudDbManager()
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            return

        ret = self.iPyProject.setPhotogrammetryManager()
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            return

        # self.iPyModelManagementToolsProject=IPyModelManagementToolsProject()
        # self.iPyModelManagementToolsProject.setPythonModulePath(libCppPath)
        # ret = self.iPyModelManagementToolsProject.initialize()
        self.parametersFromPythonStringSeparator = self.iPyProject.getParametersFromPythonStringSeparator()
        ret = self.iPyProject.mmtSetProjectManagerTemporalPath(self.projectManagerTemporalPath)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n" + ret[1])
            msgBox.exec_()
            self.pmTemporalPathLineEdit.setText("")
            self.projectManagerTemporalPath = None
            return
        ret = self.iPyProject.mmtSetProjectManagerOutputPath(self.projectManagerOutputPath)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n" + ret[1])
            msgBox.exec_()
            self.pmOutputPathLineEdit.setText("")
            self.projectManagerOutputPath = None
            return

        self.roisShapefiles = []
        self.roisFileTypes = []
        self.roisFileTypes.append(MMTDefinitions.CONST_DOCUMENTS_TYPE_SHAPEFILE)
        self.roisFilesActiveFileExtensions = self.roisFileTypes

        self.powerlinesFiles = []
        self.powerlinesFilesFileTypes = []
        self.powerlinesFilesFileTypes.append(MMTDefinitions.CONST_DOCUMENTS_TYPE_SHAPEFILE)
        # self.powerLinesFilesFileTypes.append(PCTDefinitions.CONST_DOCUMENTS_TYPE_LAZFILE)
        self.powerlinesFilesActiveFileExtensions = self.powerlinesFilesFileTypes

        self.solarParkFiles = []
        self.solarParkFilesFileTypes = []
        self.solarParkFilesFileTypes.append(MMTDefinitions.CONST_DOCUMENTS_TYPE_SHAPEFILE)
        # self.powerLinesFilesFileTypes.append(PCTDefinitions.CONST_DOCUMENTS_TYPE_LAZFILE)
        self.solarParkFilesActiveFileExtensions = self.solarParkFilesFileTypes

        self.layerTreeProject = None
        self.layerTreeProjectName = None
        # self.layerTreePCTiles = None
        # self.layerTreePCTilesName = None
        # self.loadedTiles = []
        self.pvAnomaliesVLayer = None
        self.pvAnomaliesPanelsVLayer = None

        # set projectManagement active
        self.modelManagementToolBox.setCurrentIndex(0)

        self.modelManagementToolBox.currentChanged.connect(self.onModelManagementToolBoxChanged)

        ###################################################
        # Project Management Page
        ###################################################

        # Projects spatialite databases
        self.getModelManagementSpatialiteConnections()
        self.projectsComboBox.currentIndexChanged.connect(self.selectProject)

        # Project
        self.openProjectPushButton.clicked.connect(self.openProject)
        self.closeProjectPushButton.clicked.connect(self.closeProject)

        self.projectManagementTabWidget.currentChanged.connect(self.onProjectManagementTabWidgetChanged)

        # Project types
        self.projecTypes = self.iPyProject.mmtGetProjectTypes()
        self.projectTypeComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
        for projectType in self.projecTypes:
            self.projectTypeComboBox.addItem(projectType)
        self.projectTypeComboBox.currentIndexChanged.connect(self.selectProjectType)

        # Parameters
        self.projectParametersPushButton.clicked.connect(self.selectProjectParameters)

        # DbFile
        self.databasePushButton.clicked.connect(self.selectNewDatabase)

        self.projectManagementTabWidget.setTabEnabled(0,True)
        self.projectManagementTabWidget.setTabEnabled(1,False)
        self.projectManagementTabWidget.setTabEnabled(2,False)
        self.projectManagementTabWidget.setTabEnabled(3,False)
        self.projectManagementTabWidget.setCurrentIndex(0)
        self.openProjectPushButton.setEnabled(False)
        self.closeProjectPushButton.setEnabled(False)

        # ROIs
        self.roisPushButton.clicked.connect(self.selectRois)
        self.numberOfRoisLineEdit.setText("0")

        # create
        self.createProjectPushButton.clicked.connect(self.createProject)

        self.selectPLSFsPushButton.clicked.connect(self.selectPLSFs)
        self.plsfNameShpRadioButton.clicked.connect(self.selectPLSFNameShp)
        self.plsfNameInputRadioButton.clicked.connect(self.selectPLSFNameInput)
        self.plsfNameFieldRadioButton.clicked.connect(self.selectPLSFNameField)
        self.plsfNameInputPushButton.clicked.connect(self.selectPLSFNameInputValue)
        self.plsfNameFieldPushButton.clicked.connect(self.selectPLSDNameFieldValue)

        self.plsfElectricPylonsMinimumDistancePushButton.clicked.connect(self.selectMinimumDistanceBetweenElectricPylons)
        self.plsfElectricPylonsBaseRadiusPushButton.clicked.connect(self.selectElectricPylonsBaseRadius)
        self.plsfElectricPylonsHeightPushButton.clicked.connect(self.selectElectricPylonsHeight)

        self.plsfProcessPushButton.clicked.connect(self.addPowerlinesFromShpProcess)

        self.selectSPSFsPushButton.clicked.connect(self.selectSPSFs)
        self.spdSelectSFFieldsPushButton.clicked.connect(self.selectSPSFFields)
        self.spsfProcessPushButton.clicked.connect(self.spsfProcess)

        # temporal path
        self.pmTemporalPathPushButton.clicked.connect(self.selectProjectManagerTemporalPath)
        self.pmOutputPathPushButton.clicked.connect(self.selectProjectManagerOutputPath)

        self.processingToolsPage.setEnabled(False)

        ###################################################
        # Processing ToolsPage
        ###################################################
        self.addPointCloudPushButton.clicked.connect(self.addPointCloudConnection)
        self.removePointCloudPushButton.clicked.connect(self.removePointCloudConnection)
        self.openPointCloudPushButton.clicked.connect(self.openPointCloud)

        self.addPhotogrammetryPushButton.clicked.connect(self.addPhotogrammetryConnection)
        self.removePhotogrammetryPushButton.clicked.connect(self.removePhotogrammetryConnection)
        self.openPhotogrammetryPushButton.clicked.connect(self.openPhotogrammetry)
        self.openPhotogrammetryPushButton.setEnabled(False)

        self.processCommandComboBox.currentIndexChanged.connect(self.selectCommand)
        self.commandParamtersPushButton.clicked.connect(self.selectCommandParameters)
        self.processCommandPushButton.clicked.connect(self.selectCommandProcess)
        self.processCommandPushButton.setEnabled(False)
        self.reportGroupBox.setVisible(False)
        self.reportReferenceLayerComboBox.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.reportReferenceLayerComboBox.layerChanged.connect(self.selectReportReferenceLayerComboBox)
        self.reportSelectedFeatureCheckBox.stateChanged.connect(self.selectReportSelectedFeature)
        # self.reportUpdatePushButton.clicked.connect(self.selectUpdateReferenceLayers)
        self.reportArrayComboBox.currentIndexChanged.connect(self.selectReportArray)
        self.reportMapPanelCheckBox.stateChanged.connect(self.selectMapPanelCheckBox)
        self.reportPanelComboBox.currentIndexChanged.connect(self.selectReportPanel)
        self.reportHotspotComboBox.currentIndexChanged.connect(self.selectReportHotspot)
        self.reportProcessPushButton.clicked.connect(self.selectReportProcess)
        self.mapPanel = self.reportMapPanelCheckBox.isChecked()

    def loadElectricPylonsLayer(self):
        electricPylonsTableName = MMTDefinitions.CONST_SPATIALITE_LAYERS_ELECTRIC_PYLONS_TABLE_NAME
        layerList = QgsProject.instance().mapLayersByName(electricPylonsTableName)
        if not layerList:
            uri = QgsDataSourceUri()
            uri.setDatabase(self.dbFileName)
            schema = ''
            table = electricPylonsTableName
            geom_column = MMTDefinitions.CONST_SPATIALITE_LAYERS_ELECTRIC_PYLONS_TABLE_GEOMETRY_COLUMN
            uri.setDataSource(schema, table, geom_column)
            display_name = electricPylonsTableName
            vlayer = QgsVectorLayer(uri.uri(), display_name, 'spatialite')
            if vlayer.isValid():
                # if vlayer.featureCount() == 0:
                #     return
                QgsProject.instance().addMapLayer(vlayer, False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer))
                vlayer.loadNamedStyle(self.qmlElectricPylonsFileName)
                vlayer.triggerRepaint()
                self.iface.setActiveLayer(vlayer)
                self.iface.zoomToActiveLayer()
            else:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Impossible to Load table: " + electricPylonsTableName
                                   +" into QGIS")
                msgBox.exec_()

    def loadElectricPylonsConnectionsLayer(self):
        electricPylonsConnectionsTableName = MMTDefinitions.CONST_SPATIALITE_LAYERS_ELECTRIC_PYLONS_CONNECTIONS_TABLE_NAME
        layerList = QgsProject.instance().mapLayersByName(electricPylonsConnectionsTableName)
        if not layerList:
            uri = QgsDataSourceUri()
            uri.setDatabase(self.dbFileName)
            schema = ''
            table = electricPylonsConnectionsTableName
            geom_column = MMTDefinitions.CONST_SPATIALITE_LAYERS_ELECTRIC_PYLONS_CONNECTIONS_TABLE_GEOMETRY_COLUMN
            uri.setDataSource(schema, table, geom_column)
            display_name = electricPylonsConnectionsTableName
            vlayer = QgsVectorLayer(uri.uri(), display_name, 'spatialite')
            if vlayer.isValid():
                # if vlayer.featureCount() == 0:
                #     return
                QgsProject.instance().addMapLayer(vlayer,False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer))
                vlayer.loadNamedStyle(self.qmlElectricPylonsConnectionsFileName)
                vlayer.triggerRepaint()
                self.iface.setActiveLayer(vlayer)
                self.iface.zoomToActiveLayer()
            else:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Impossible to Load table: " + electricPylonsConnectionsTableName
                                   +" into QGIS")
                msgBox.exec_()

    def loadHazardAreasLayer(self):
        hazardAreaTableName = MMTDefinitions.CONST_SPATIALITE_LAYERS_HAZARD_AREAS_TABLE_NAME
        layerList = QgsProject.instance().mapLayersByName(hazardAreaTableName)
        if not layerList:
            uri = QgsDataSourceUri()
            uri.setDatabase(self.dbFileName)
            schema = ''
            table = hazardAreaTableName
            geom_column = MMTDefinitions.CONST_SPATIALITE_LAYERS_HAZARD_AREAS_TABLE_GEOMETRY_COLUMN
            uri.setDataSource(schema, table, geom_column)
            display_name_types = MMTDefinitions.CONST_SPATIALITE_LAYERS_HAZARD_AREAS_TYPES_LAVER_NAME
            vlayer_types = QgsVectorLayer(uri.uri(), display_name_types, 'spatialite')
            if vlayer_types.isValid():
                # if vlayer.featureCount() == 0:
                #     return
                QgsProject.instance().addMapLayer(vlayer_types, False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer_types))
                vlayer_types.loadNamedStyle(self.qmlHazardAreasTypes)
                vlayer_types.triggerRepaint()
                # self.iface.setActiveLayer(vlayer_types)
                # self.iface.zoomToActiveLayer()

                display_name_distances = MMTDefinitions.CONST_SPATIALITE_LAYERS_HAZARD_AREAS_DISTANCES_LAVER_NAME
                vlayer_distances = QgsVectorLayer(uri.uri(), display_name_distances, 'spatialite')
                QgsProject.instance().addMapLayer(vlayer_distances, False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer_distances))
                vlayer_distances.loadNamedStyle(self.qmlHazardAreasDistances)
                vlayer_distances.triggerRepaint()
                # self.iface.setActiveLayer(vlayer_types)
                # self.iface.zoomToActiveLayer()

                display_name_heights = MMTDefinitions.CONST_SPATIALITE_LAYERS_HAZARD_AREAS_HEIGHTS_LAVER_NAME
                vlayer_heights = QgsVectorLayer(uri.uri(), display_name_heights, 'spatialite')
                QgsProject.instance().addMapLayer(vlayer_heights, False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer_heights))
                vlayer_heights.loadNamedStyle(self.qmlHazardAreasHeights)
                vlayer_heights.triggerRepaint()
                # self.iface.setActiveLayer(vlayer_types)
                # self.iface.zoomToActiveLayer()

                display_name_falls = MMTDefinitions.CONST_SPATIALITE_LAYERS_HAZARD_AREAS_FALLS_LAVER_NAME
                vlayer_falls = QgsVectorLayer(uri.uri(), display_name_falls, 'spatialite')
                QgsProject.instance().addMapLayer(vlayer_falls, False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer_falls))
                vlayer_falls.loadNamedStyle(self.qmlHazardAreasFalls)
                vlayer_falls.triggerRepaint()
                # self.iface.setActiveLayer(vlayer_types)
                # self.iface.zoomToActiveLayer()
            else:
                return
                # msgBox = QMessageBox(self)
                # msgBox.setIcon(QMessageBox.Information)
                # msgBox.setWindowTitle(self.windowTitle)
                # msgBox.setText("Impossible to Load table: " + electricPylonsTableName
                #                    +" into QGIS")
                # msgBox.exec_()

    def loadHazardAreasMshLayer(self):
        hazardAreaTableName = MMTDefinitions.CONST_SPATIALITE_LAYERS_HAZARD_AREAS_MSH_TABLE_NAME
        layerList = QgsProject.instance().mapLayersByName(hazardAreaTableName)
        if not layerList:
            uri = QgsDataSourceUri()
            uri.setDatabase(self.dbFileName)
            schema = ''
            table = hazardAreaTableName
            geom_column = MMTDefinitions.CONST_SPATIALITE_LAYERS_HAZARD_AREAS_MSH_TABLE_GEOMETRY_COLUMN
            uri.setDataSource(schema, table, geom_column)
            display_name_types = MMTDefinitions.CONST_SPATIALITE_LAYERS_HAZARD_AREAS_MSH_TYPES_LAVER_NAME
            vlayer_types = QgsVectorLayer(uri.uri(), display_name_types, 'spatialite')
            if vlayer_types.isValid():
                # if vlayer.featureCount() == 0:
                #     return
                QgsProject.instance().addMapLayer(vlayer_types, False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer_types))
                vlayer_types.loadNamedStyle(self.qmlHazardAreasTypes)
                vlayer_types.triggerRepaint()
                # self.iface.setActiveLayer(vlayer_types)
                # self.iface.zoomToActiveLayer()

                display_name_distances = MMTDefinitions.CONST_SPATIALITE_LAYERS_HAZARD_AREAS_MSH_DISTANCES_LAVER_NAME
                vlayer_distances = QgsVectorLayer(uri.uri(), display_name_distances, 'spatialite')
                QgsProject.instance().addMapLayer(vlayer_distances, False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer_distances))
                vlayer_distances.loadNamedStyle(self.qmlHazardAreasDistances)
                vlayer_distances.triggerRepaint()
                # self.iface.setActiveLayer(vlayer_types)
                # self.iface.zoomToActiveLayer()

                display_name_heights = MMTDefinitions.CONST_SPATIALITE_LAYERS_HAZARD_AREAS_MSH_HEIGHTS_LAVER_NAME
                vlayer_heights = QgsVectorLayer(uri.uri(), display_name_heights, 'spatialite')
                QgsProject.instance().addMapLayer(vlayer_heights, False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer_heights))
                vlayer_heights.loadNamedStyle(self.qmlHazardAreasHeights)
                vlayer_heights.triggerRepaint()
                # self.iface.setActiveLayer(vlayer_types)
                # self.iface.zoomToActiveLayer()

                display_name_falls = MMTDefinitions.CONST_SPATIALITE_LAYERS_HAZARD_AREAS_MSH_FALLS_LAVER_NAME
                vlayer_falls = QgsVectorLayer(uri.uri(), display_name_falls, 'spatialite')
                QgsProject.instance().addMapLayer(vlayer_falls, False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer_falls))
                vlayer_falls.loadNamedStyle(self.qmlHazardAreasFalls)
                vlayer_falls.triggerRepaint()
                # self.iface.setActiveLayer(vlayer_types)
                # self.iface.zoomToActiveLayer()
            else:
                return
                # msgBox = QMessageBox(self)
                # msgBox.setIcon(QMessageBox.Information)
                # msgBox.setWindowTitle(self.windowTitle)
                # msgBox.setText("Impossible to Load table: " + electricPylonsTableName
                #                    +" into QGIS")
                # msgBox.exec_()

    def loadPhotovoltaicArrayPanels(self):
        photovoltaicArrayPanelsTableName = MMTDefinitions.CONST_SPATIALITE_LAYERS_PHOTOVOLTAIC_ARRAY_PANELS_TABLE_NAME
        layerList = QgsProject.instance().mapLayersByName(photovoltaicArrayPanelsTableName)
        if not layerList:
            uri = QgsDataSourceUri()
            uri.setDatabase(self.dbFileName)
            schema = ''
            table = photovoltaicArrayPanelsTableName
            geom_column = MMTDefinitions.CONST_SPATIALITE_LAYERS_PHOTOVOLTAIC_ARRAY_PANELS_TABLE_GEOMETRY_COLUMN
            uri.setDataSource(schema, table, geom_column)
            display_name = photovoltaicArrayPanelsTableName
            vlayer = QgsVectorLayer(uri.uri(), display_name, 'spatialite')
            if vlayer.isValid():
                # if vlayer.featureCount() == 0:
                #     return
                QgsProject.instance().addMapLayer(vlayer,False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer))
                vlayer.loadNamedStyle(self.qmlPhotovoltaicArrayPanelsFileName)
                vlayer.triggerRepaint()
                self.iface.setActiveLayer(vlayer)
                self.iface.zoomToActiveLayer()
            else:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Impossible to Load table: " + photovoltaicArrayPanelsTableName
                                   +" into QGIS")
                msgBox.exec_()
        else:
            vlayer = layerList[0]
            self.iface.setActiveLayer(vlayer)
            self.iface.zoomToActiveLayer()
            self.iface.mapCanvas().refresh()

    def loadPhotovoltaicPanels(self):
        photovoltaicPanelsTableName = MMTDefinitions.CONST_SPATIALITE_LAYERS_PHOTOVOLTAIC_PANELS_TABLE_NAME
        layerList = QgsProject.instance().mapLayersByName(photovoltaicPanelsTableName)
        if not layerList:
            uri = QgsDataSourceUri()
            uri.setDatabase(self.dbFileName)
            schema = ''
            table = photovoltaicPanelsTableName
            geom_column = MMTDefinitions.CONST_SPATIALITE_LAYERS_PHOTOVOLTAIC_PANELS_TABLE_GEOMETRY_COLUMN
            uri.setDataSource(schema, table, geom_column)
            display_name = photovoltaicPanelsTableName
            vlayer = QgsVectorLayer(uri.uri(), display_name, 'spatialite')
            if vlayer.isValid():
                # if vlayer.featureCount() == 0:
                #     return
                QgsProject.instance().addMapLayer(vlayer,False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer))
                vlayer.loadNamedStyle(self.qmlPhotovoltaicPanelsFileName)
                vlayer.setScaleBasedVisibility(True)
                vlayer.setMinimumScale(MMTDefinitions.CONST_PANELS_LAYER_MINIMUM_SCALE)
                vlayer.setMaximumScale(MMTDefinitions.CONST_PANELS_LAYER_MAXIMUM_SCALE)
                vlayer.triggerRepaint()
                self.iface.setActiveLayer(vlayer)
                self.iface.zoomToActiveLayer()
            else:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Impossible to Load table: " + photovoltaicPanelsTableName
                                   +" into QGIS")
                msgBox.exec_()

    def loadPhotovoltaicAnomaliesLayers(self):
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        ret = self.iPyProject.mmtGetExistsPhotovoltaicAnomaliesTables(dbFileName)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            return
        else:
            if ret[1] == "False":
                return
        pvAnomaliesTableName = MMTDefinitions.CONST_SPATIALITE_LAYERS_PHOTOVOLTAIC_PV_ANOMALIES_TABLE_NAME
        layerList = QgsProject.instance().mapLayersByName(pvAnomaliesTableName)
        if not layerList:
            uri = QgsDataSourceUri()
            uri.setDatabase(self.dbFileName)
            schema = ''
            table = pvAnomaliesTableName
            geom_column = MMTDefinitions.CONST_SPATIALITE_LAYERS_PHOTOVOLTAIC_PV_ANOMALIES_TABLE_GEOMETRY_COLUMN
            uri.setDataSource(schema, table, geom_column)
            display_name = pvAnomaliesTableName
            vlayer = QgsVectorLayer(uri.uri(), display_name, 'spatialite')
            if vlayer.isValid():
                # if vlayer.featureCount() == 0:
                #     return
                QgsProject.instance().addMapLayer(vlayer,False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer))
                vlayer.loadNamedStyle(self.qmlPhotovoltaicAnomaliesFileName)
                # vlayer.triggerRepaint()
                # self.iface.setActiveLayer(vlayer)
                # self.iface.zoomToActiveLayer()
                vlayer.setScaleBasedVisibility(True)
                vlayer.setMinimumScale(MMTDefinitions.CONST_ANOMALIES_LAYER_MINIMUM_SCALE)
                vlayer.setMaximumScale(MMTDefinitions.CONST_ANOMALIES_LAYER_MAXIMUM_SCALE)
                self.pvAnomaliesVLayer = vlayer
            else:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Impossible to Load table: " + pvAnomaliesTableName
                                   +" into QGIS")
                msgBox.exec_()
        pvAnomaliesPanelsTableName = MMTDefinitions.CONST_SPATIALITE_LAYERS_PHOTOVOLTAIC_PV_ANOMALIES_PANELS_TABLE_NAME
        layerList = QgsProject.instance().mapLayersByName(pvAnomaliesPanelsTableName)
        if not layerList:
            uri = QgsDataSourceUri()
            uri.setDatabase(self.dbFileName)
            schema = ''
            table = pvAnomaliesPanelsTableName
            geom_column = MMTDefinitions.CONST_SPATIALITE_LAYERS_PHOTOVOLTAIC_PV_ANOMALIES_PANELS_TABLE_GEOMETRY_COLUMN
            uri.setDataSource(schema, table, geom_column)
            display_name = pvAnomaliesPanelsTableName
            vlayer = QgsVectorLayer(uri.uri(), display_name, 'spatialite')
            if vlayer.isValid():
                # if vlayer.featureCount() == 0:
                #     return
                QgsProject.instance().addMapLayer(vlayer,False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer))
                vlayer.loadNamedStyle(self.qmlPhotovoltaicAnomaliesPanelsFileName)
                # vlayer.triggerRepaint()
                # self.iface.setActiveLayer(vlayer)
                # self.iface.zoomToActiveLayer()
                vlayer.setScaleBasedVisibility(True)
                vlayer.setMinimumScale(MMTDefinitions.CONST_ANOMALIES_PANELS_LAYER_MINIMUM_SCALE)
                vlayer.setMaximumScale(MMTDefinitions.CONST_ANOMALIES_PANELS_LAYER_MAXIMUM_SCALE)
                self.pvAnomaliesPanelsVLayer = vlayer
            else:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Impossible to Load table: " + pvAnomaliesPanelsTableName
                                   +" into QGIS")
                msgBox.exec_()

    def loadROIsLayer(self):
        roisTableName = MMTDefinitions.CONST_SPATIALITE_LAYERS_ROIS_TABLE_NAME
        layerList = QgsProject.instance().mapLayersByName(roisTableName)
        if not layerList:
            uri = QgsDataSourceUri()
            uri.setDatabase(self.dbFileName)
            schema = ''
            table = roisTableName
            geom_column = MMTDefinitions.CONST_SPATIALITE_LAYERS_ROIS_TABLE_GEOMETRY_COLUMN
            uri.setDataSource(schema, table, geom_column)
            display_name = roisTableName
            vlayer = QgsVectorLayer(uri.uri(), display_name, 'spatialite')
            if vlayer.isValid():
                # if vlayer.featureCount() == 0:
                #     return
                QgsProject.instance().addMapLayer(vlayer,False)
                self.layerTreeProject.insertChildNode(1, QgsLayerTreeLayer(vlayer))
                vlayer.loadNamedStyle(self.qmlRoisFileName)
                vlayer.triggerRepaint()
                self.iface.setActiveLayer(vlayer)
                self.iface.zoomToActiveLayer()
            else:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Impossible to Load table: " + roisTableName
                                   +" into QGIS")
                msgBox.exec_()

    def onModelManagementToolBoxChanged(self,i): #changed!
        # QMessageBox.information(self,
        #           "Model Management ToolBox Changed!",
        #           "Current Tab Index: %d" % i ) #changed!
        # if i==1: # Point Clouds Projects
        #     self.getPointCloudSpatialiteConnections()
        # yo = 1
        return

    def onProjectManagementTabWidgetChanged(self,i): #changed!
        # QMessageBox.information(self,
        #           "Tab Index Changed!",
        #           "Current Tab Index: %d" % i ) #changed!
        if i==1: # add powerlines
            self.plsfNameShpRadioButton.setChecked(True)
            self.plsfNameInputLineEdit.clear()
            self.plsfNameFieldLineEdit.clear()
            strValueMinimuDistance = MMTDefinitions.CONST_LINEAR_COARSE_PRECISION.format(MMTDefinitions.CONST_POWERLINES_MINIMUM_DISTANCE_BETWEEN_ELECTRIC_PYLONS_DEFAULT_VALUE)
            self.plsfElectricPylonsMinimumDistanceLineEdit.setText(strValueMinimuDistance)
            strValueBaseRadius = MMTDefinitions.CONST_LINEAR_COARSE_PRECISION.format(MMTDefinitions.CONST_POWERLINES_ELECTRIC_PYLONS_BASE_RADIUS_DEFAULT_VALUE)
            self.plsfElectricPylonsBaseRadiusLineEdit.setText(strValueBaseRadius)
            strValueHeight = MMTDefinitions.CONST_LINEAR_COARSE_PRECISION.format(MMTDefinitions.CONST_POWERLINES_ELECTRIC_PYLONS_HEIGHT_DEFAULT_VALUE)
            self.plsfElectricPylonsHeightLineEdit.setText(strValueHeight)
        return

    def openPhotogrammetry(self):
        return

    def openPointCloud(self):
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        selectedPointCloudConnectionInProject = self.pointCloudsComboBox.currentText()
        if selectedPointCloudConnectionInProject == MMTDefinitions.CONST_NO_COMBO_SELECT:
            return
        pointCloudSpatialiteDbFileName = self.pointCloudConnectionsInProject[selectedPointCloudConnectionInProject]
        self.pluginPointCloudToolsInstance.runFromAnotherPlugin(self.iface,
                                                                self.path_plugin,
                                                                self.path_libCpp,
                                                                self.plugin_name,
                                                                self.iPyProject,
                                                                selectedPointCloudConnectionInProject)

        layersPanel = [x for x in self.iface.mainWindow().findChildren(QDockWidget) if x.objectName() == 'Layers']
        pctPanel = [x for x in self.iface.mainWindow().findChildren(QDockWidget) if
                    x.objectName() == 'PointCloudToolsDockWidgetBase']
        mmtPanel = [x for x in self.iface.mainWindow().findChildren(QDockWidget) if
                    x.objectName() == 'ModelManagementToolsDockWidgetBase']

        # Para colocar primero en pila vertical y luego unir dos en un tab
        if layersPanel:
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, layersPanel[0])
        self.iface.addDockWidget(Qt.LeftDockWidgetArea, pctPanel[0])
        self.iface.addDockWidget(Qt.LeftDockWidgetArea, mmtPanel[0])
        self.iface.mainWindow().tabifyDockWidget(mmtPanel[0], pctPanel[0])

        # Para que el nobmre de los dos widgets en el tab aparezca en la parte superior
        # esto no va bien
        # iface.mainWindow().setTabPosition(Qt.LeftDockWidgetArea,QTabWidget.South)

        # Para maximizar la ventana principal
        self.iface.mainWindow().showNormal()
        self.iface.mainWindow().showMaximized()
        self.iface.mainWindow().update()
        return

    def openProject(self):
        self.closeProjectPushButton.setEnabled(False)
        self.dbFileName = None
        self.layerTreeName = None
        self.layerTree = None
        connectionFileName = self.projectsComboBox.currentText()
        if connectionFileName == MMTDefinitions.CONST_NO_COMBO_SELECT:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select project before")
            msgBox.exec_()
            return
        connectionPath = self.modelManagementConnections[connectionFileName]
        ret = self.iPyProject.mmtOpenProject(connectionPath)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            self.projectsComboBox.setCurrentIndex(0)
            return
        ret = self.iPyProject.mmtGetProjectCrsEpsgCode(connectionPath)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            self.projectsComboBox.setCurrentIndex(0)
            return
        self.crsEpsgCode = ret[1]
        ret = self.iPyProject.mmtGetProjectType(connectionPath)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            self.projectsComboBox.setCurrentIndex(0)
            return
        self.projectType = ret[1]
        self.dbFileName = connectionPath
        groupName = MMTDefinitions.CONST_LAYER_TREE_PROJECT_NAME
        self.layerTreeProjectName = groupName + connectionFileName
        root = QgsProject.instance().layerTreeRoot()
        self.layerTreeProject = root.addGroup(self.layerTreeProjectName)
        self.loadROIsLayer()
        if self.projectType.lower() == MMTDefinitions.CONST_PROJECT_TYPE_POWERLINE.lower():
            self.loadElectricPylonsLayer()
            self.loadElectricPylonsConnectionsLayer()
            self.loadHazardAreasMshLayer()
            self.loadHazardAreasLayer()
        if self.projectType.lower() == MMTDefinitions.CONST_PROJECT_TYPE_SOLARPARK.lower():
            self.loadPhotovoltaicArrayPanels()
            self.loadPhotovoltaicPanels()
            self.loadPhotovoltaicAnomaliesLayers()
        # self.loadTilesLayer()
        self.closeProjectPushButton.setEnabled(True)
        self.openProjectPushButton.setEnabled(False)
        self.projectsComboBox.setEnabled(False)
        self.projectManagementTabWidget.setEnabled(True)
        self.projectManagementTabWidget.setTabEnabled(0, False)
        if self.projectType.lower() == MMTDefinitions.CONST_PROJECT_TYPE_POWERLINE.lower():
            self.projectManagementTabWidget.setTabEnabled(1, True)
            self.projectManagementTabWidget.setTabEnabled(2, False)
            self.plsfNameShpRadioButton.setChecked(True)
            self.selectPLSFNameShp()
        if self.projectType.lower() == MMTDefinitions.CONST_PROJECT_TYPE_SOLARPARK.lower():
            self.projectManagementTabWidget.setTabEnabled(1, False)
            self.projectManagementTabWidget.setTabEnabled(2, True)
            self.spdSelectSFFieldsPushButton.setEnabled(False)
            self.spsfProcessPushButton.setEnabled(False)
        # tilesTableName = PCTDefinitions.CONST_SPATIALITE_LAYERS_TILES_TABLE_NAME
        # layerList = QgsProject.instance().mapLayersByName(tilesTableName)
        # if not layerList:
        #     self.projectManagementTabWidget.setTabEnabled(2, False)
        # else:
        #     tilesLayer = layerList[0]
        #     if tilesLayer.featureCount() > 0:
        #         self.projectManagementTabWidget.setTabEnabled(2, True)
        self.processingToolsPage.setEnabled(True)
        self.getPointCloudSpatialiteConnectionsInProject()
        self.getPhotogrammetrySpatialiteConnectionsInProject()
        self.getCommands()
        # # msgBox = QMessageBox(self)
        # # msgBox.setIcon(QMessageBox.Information)
        # # msgBox.setWindowTitle(self.windowTitle)
        # # msgBox.setText("Process completed successfully")
        # # msgBox.exec_()
        return

    def refreshMapCanvas(self):
        currentScale = self.iface.mapCanvas().scale()
        newScale = currentScale * 1.001
        self.iface.mapCanvas().zoomScale(newScale)

    def removeGroup(self,root,name):
        # root = QgsProject.instance().layerTreeRoot()
        group = root.findGroup(name)
        if not group is None:
            for child in group.children():
                dump = child.dump()
                id = dump.split("=")[-1].strip()
                QgsProject.instance().removeMapLayer(id)
            root.removeChildNode(group)

    def selectMapPanelCheckBox(self):
        if self.reportMapPanelCheckBox.isChecked():
            self.mapPanel = True
        else:
            self.mapPanel = False

    def selectNewDatabase(self):
        oldFileName=self.databaseLineEdit.text()
        title="Select New Project File (.sqlite)"
        filters="Project Files (*.sqlite)"
        fileName, _ = QFileDialog.getSaveFileName(self,title,self.path,filters)
        if fileName:
            fileInfo = QFileInfo(fileName)
            self.path = fileInfo.absolutePath()
            self.databaseLineEdit.setText(fileName)
            self.settings.setValue("last_path", self.path)
            self.settings.sync()
        return

    def removePhotogrammetryConnection(self):
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        selectedPhotogrammetryConnectionInProject = self.photogrammetriesComboBox.currentText()
        if selectedPhotogrammetryConnectionInProject == MMTDefinitions.CONST_NO_COMBO_SELECT:
            return
        photogrammetrySpatialiteDbFileName = self.photogrammetryConnectionsInProject[selectedPhotogrammetryConnectionInProject]
        ret = self.iPyProject.mmtRemovePhotogrammetryDb(dbFileName,
                                                        photogrammetrySpatialiteDbFileName)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            return
        else:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Process completed successfully")
            msgBox.exec_()
        del self.photogrammetryConnectionsInProject[selectedPhotogrammetryConnectionInProject]
        self.photogrammetriesComboBox.clear()
        self.photogrammetriesComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
        for photogrammetryConnectionInProject in self.photogrammetryConnectionsInProject.keys():
            self.photogrammetriesComboBox.addItem(photogrammetryConnectionInProject)
        return

    def removePointCloudConnection(self):
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        selectedPointCloudConnectionInProject = self.pointCloudsComboBox.currentText()
        if selectedPointCloudConnectionInProject == MMTDefinitions.CONST_NO_COMBO_SELECT:
            return
        pointCloudSpatialiteDbFileName = self.pointCloudConnectionsInProject[selectedPointCloudConnectionInProject]
        ret = self.iPyProject.mmtRemovePointCloudDb(dbFileName,
                                                    pointCloudSpatialiteDbFileName)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            return
        else:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Process completed successfully")
            msgBox.exec_()
        del self.pointCloudConnectionsInProject[selectedPointCloudConnectionInProject]
        self.pointCloudsComboBox.clear()
        self.pointCloudsComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
        for pointCloudConnectionInProject in self.pointCloudConnectionsInProject.keys():
            self.pointCloudsComboBox.addItem(pointCloudConnectionInProject)
        return

    def selectElectricPylonsBaseRadius(self):
        strCandidateValue = self.plsfElectricPylonsBaseRadiusLineEdit.text()
        label = "Input electric pylons base radius (m):"
        title = MMTDefinitions.CONST_POWERLINES_BASE_RADIUS_ELECTRIC_PYLONS_TITLE
        ok = False
        while not ok:
            [text, ok] = QInputDialog.getText(self, title, label, QLineEdit.Normal, strCandidateValue)
            if ok and text:
                value = 0.0
                text = text.strip()
                if text.isdigit() or re.match(self.num_format,text):
                    value = float(text)
                    if (value < MMTDefinitions.CONST_POWERLINES_BASE_RADIUS_ELECTRIC_PYLONS_MINIMUM_VALUE
                        or value > MMTDefinitions.CONST_POWERLINES_BASE_RADIUS_ELECTRIC_PYLONS_MAXIMUM_VALUE):
                        ok = False
                else:
                    ok = False
                if ok:
                    strValue=MMTDefinitions.CONST_LINEAR_COARSE_PRECISION.format(value)
                    self.plsfElectricPylonsBaseRadiusLineEdit.setText(strValue)
            else:
                if not ok:
                    ok = True

    def selectElectricPylonsHeight(self):
        strCandidateValue = self.plsfElectricPylonsHeightLineEdit.text()
        label = "Input electric pylons base radius (m):"
        title = MMTDefinitions.CONST_POWERLINES_HEIGHT_ELECTRIC_PYLONS_TITLE
        ok = False
        while not ok:
            [text, ok] = QInputDialog.getText(self, title, label, QLineEdit.Normal, strCandidateValue)
            if ok and text:
                value = 0.0
                text = text.strip()
                if text.isdigit() or re.match(self.num_format,text):
                    value = float(text)
                    if (value < MMTDefinitions.CONST_POWERLINES_HEIGHT_ELECTRIC_PYLONS_MINIMUM_VALUE
                        or value > MMTDefinitions.CONST_POWERLINES_HEIGHT_ELECTRIC_PYLONS_MAXIMUM_VALUE):
                        ok = False
                else:
                    ok = False
                if ok:
                    strValue=MMTDefinitions.CONST_LINEAR_COARSE_PRECISION.format(value)
                    self.plsfElectricPylonsHeightLineEdit.setText(strValue)
            else:
                if not ok:
                    ok = True

    def selectMinimumDistanceBetweenElectricPylons(self):
        strCandidateValue = self.plsfElectricPylonsMinimumDistanceLineEdit.text()
        label = "Input minimum distance (m):"
        title = MMTDefinitions.CONST_POWERLINES_MINIMUM_DISTANCE_BETWEEN_ELECTRIC_PYLONS_TITLE
        ok = False
        while not ok:
            [text, ok] = QInputDialog.getText(self, title, label, QLineEdit.Normal, strCandidateValue)
            if ok and text:
                value = 0.0
                text = text.strip()
                if text.isdigit() or re.match(self.num_format,text):
                    value = float(text)
                    if (value < MMTDefinitions.CONST_POWERLINES_MINIMUM_DISTANCE_BETWEEN_ELECTRIC_PYLONS_MINIMUM_VALUE
                        or value > MMTDefinitions.CONST_POWERLINES_MINIMUM_DISTANCE_BETWEEN_ELECTRIC_PYLONS_MAXIMUM_VALUE):
                        ok = False
                else:
                    ok = False
                if ok:
                    strValue=MMTDefinitions.CONST_LINEAR_COARSE_PRECISION.format(value)
                    self.plsfElectricPylonsMinimumDistanceLineEdit.setText(strValue)
            else:
                if not ok:
                    ok = True

    def selectPLSFNameField(self):
        if self.plsfNameFieldRadioButton.isChecked():
            self.plsfNameInputPushButton.setEnabled(False)
            self.plsfNameInputLineEdit.clear()
            self.plsfNameFieldPushButton.setEnabled(True)
            self.plsfNameFieldLineEdit.clear()
        return

    def selectPLSFs(self):
        previousFiles = self.powerlinesFiles[:] # copia desligada
        dlg = MultipleFileSelectorDialog(self.iface,
                                         self.path,
                                         MMTDefinitions.CONST_SELECT_POWER_LINES_FILES_DIALOG_TITLE,
                                         self.powerlinesFilesFileTypes,
                                         self.powerlinesFiles,
                                         self.powerlinesFilesActiveFileExtensions)
        dlg.show() # show the dialog
        result = dlg.exec_() # Run the dialog
        self.path = dlg.getPath()
        self.settings.setValue("last_path",self.path)
        files = dlg.getFiles() # los hay repetidos
        self.powerlinesFiles = []
        self.numberOfPLSFsLineEdit.setText("0")
        for file in files:
            fileBaseName = QFileInfo(file).baseName()
            findFile = False
            for pointCloudFile in self.powerlinesFiles:
                if fileBaseName == QFileInfo(pointCloudFile).baseName():
                    findFile = True
                    break
            if not findFile:
                self.powerlinesFiles.append(file)
        self.powerlinesFilesActiveFileExtensions = dlg.getActiveFileExtensions()
        self.numberOfPLSFsLineEdit.setText(str(len(self.powerlinesFiles)))
        return

    def selectPLSDNameFieldValue(self):
        oldText = self.plsfNameFieldLineEdit.text()
        label = "Input field name for power lines readed from shapefiles:"
        title = MMTDefinitions.CONST_PROGRAM_TITLE
        [text, ok] = QInputDialog.getText(self, title, label, QLineEdit.Normal, oldText)
        if ok and text:
            text = text.strip()
            if not text == oldText:
                self.plsfNameFieldLineEdit.setText(text)
        return

    def selectPLSFNameInput(self):
        if self.plsfNameInputRadioButton.isChecked():
            self.plsfNameInputPushButton.setEnabled(True)
            self.plsfNameInputLineEdit.clear()
            self.plsfNameFieldPushButton.setEnabled(False)
            self.plsfNameFieldLineEdit.clear()
        return

    def selectPLSFNameInputValue(self):
        oldText = self.plsfNameInputLineEdit.text()
        label = "Input name for power lines readed from shapefiles:"
        title = MMTDefinitions.CONST_PROGRAM_TITLE
        [text, ok] = QInputDialog.getText(self, title, label, QLineEdit.Normal, oldText)
        if ok and text:
            text = text.strip()
            if not text == oldText:
                self.plsfNameInputLineEdit.setText(text)
        return

    def selectPLSFNameShp(self):
        if self.plsfNameShpRadioButton.isChecked():
            self.plsfNameInputPushButton.setEnabled(False)
            self.plsfNameInputLineEdit.clear()
            self.plsfNameFieldPushButton.setEnabled(False)
            self.plsfNameFieldLineEdit.clear()
        return

    def selectCommandParameters(self):
        command = self.processCommandComboBox.currentText()
        if command == MMTDefinitions.CONST_NO_COMBO_SELECT:
            return
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        ret = self.iPyProject.mmtSelectCommandParameters(dbFileName,command)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            return
        return

    def selectCommand(self):
        self.imageFileNamesByHotspotName.clear()
        self.imageFileNamesByPanelByHotspotName.clear()
        if self.projectsComboBox.currentText() == MMTDefinitions.CONST_NO_COMBO_SELECT:
            return
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        self.reportGroupBox.setVisible(False)
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            self.processCommandPushButton.setEnabled(False)
            return
        command = self.processCommandComboBox.currentText()
        if command == MMTDefinitions.CONST_NO_COMBO_SELECT:
            self.processCommandPushButton.setEnabled(False)
            return
        processCommandIsEnabled = self.iPyProject.mmtGetEnabledProcessCommand(command)
        self.processCommandPushButton.setEnabled(processCommandIsEnabled)
        if command == MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_COMMAND:
            if not self.pvAnomaliesPanelsVLayer:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("There are no computed photovoltaic anomalies in project")
                msgBox.exec_()
                self.processCommandComboBox.setCurrentIndex(0)
                return
            selectedPhotogrammetryInProject = self.photogrammetriesComboBox.currentText()
            if selectedPhotogrammetryInProject == MMTDefinitions.CONST_NO_COMBO_SELECT:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Select Photogrammetry Project")
                msgBox.exec_()
                self.processCommandComboBox.setCurrentIndex(0)
                return
            photogrammetrySpatialiteDbFileName = self.photogrammetryConnectionsInProject[selectedPhotogrammetryInProject]
            self.reportGroupBox.setVisible(True)
            if not self.pvAnomaliesPanelsVLayer:
                self.reportSelectedFeatureCheckBox.setChecked(False)
            else:
                self.reportSelectedFeatureCheckBox.setChecked(True)
            self.reportReferenceLayerComboBox.clear()
            self.reportReferenceLayerComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
            self.reportArrayComboBox.clear()
            self.reportPanelComboBox.clear()
            self.reportHotspotComboBox.clear()
            ret = self.iPyProject.mmtGetPhotovoltaicArraysWithAnomalies(dbFileName,
                                                                        photogrammetrySpatialiteDbFileName)
            if ret[0] == "False":
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Error:\n" + ret[1])
                msgBox.exec_()
                self.processCommandComboBox.setCurrentIndex(0)
                return
            self.arrays = []
            cont = 0
            for value in ret:
                if cont > 0:
                    self.arrays.append(value)
                cont = cont + 1
            self.reportArrayComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
            self.reportArrayComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_ARRAYS)
            self.reportPanelComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
            self.reportPanelComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_PANELS)
            for array in self.arrays:
                self.reportArrayComboBox.addItem(array)
            return
            self.reportHotspotComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
            self.reportHotspotComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_HOT_SPOTS)

    def selectCommandProcess(self):
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        command = self.processCommandComboBox.currentText()
        if command == MMTDefinitions.CONST_NO_COMBO_SELECT:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select command to process")
            msgBox.exec_()
            return
        needsPointCloudDb = self.iPyProject.mmtGetCommandNeedsPointCloudDb(command)
        needsPhotogrammetryDb = self.iPyProject.mmtGetCommandNeedsPhotogrammetryDb(command)
        pointCloudSpatialiteDbFileName = ""
        photogrammetrySpatialiteDbFileName = ""
        if needsPointCloudDb:
            selectedPointCloudConnectionInProject = self.pointCloudsComboBox.currentText()
            if selectedPointCloudConnectionInProject == MMTDefinitions.CONST_NO_COMBO_SELECT:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Select Point Cloud Project")
                msgBox.exec_()
                return
            pointCloudSpatialiteDbFileName = self.pointCloudConnectionsInProject[selectedPointCloudConnectionInProject]
        if needsPhotogrammetryDb:
            selectedPhotogrammetryInProject = self.photogrammetriesComboBox.currentText()
            if selectedPhotogrammetryInProject == MMTDefinitions.CONST_NO_COMBO_SELECT:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Select Photogrammetry Project")
                msgBox.exec_()
                return
            photogrammetrySpatialiteDbFileName = self.photogrammetryConnectionsInProject[selectedPhotogrammetryInProject]
        initialDateTime = QDateTime.currentDateTime()
        ret = self.iPyProject.mmtProcessCommand(dbFileName,command,
                                                pointCloudSpatialiteDbFileName,
                                                photogrammetrySpatialiteDbFileName)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            return

        finalDateTime = QDateTime.currentDateTime()
        initialSeconds = initialDateTime.toTime_t()
        finalSeconds = finalDateTime.toTime_t()
        totalDurationSeconds = finalSeconds - initialSeconds
        durationDays = floor(totalDurationSeconds / 60.0 / 60.0 / 24.0)
        durationHours = floor((totalDurationSeconds - durationDays * 60.0 * 60.0 * 24.0) / 60.0 / 60.0)
        durationMinutes = floor(
            (totalDurationSeconds - durationDays * 60.0 * 60.0 * 24.0 - durationHours * 60.0 * 60.0) / 60.0)
        durationSeconds = totalDurationSeconds - durationDays * 60.0 * 60.0 * 24.0 - durationHours * 60.0 * 60.0 - durationMinutes * 60.0
        msgTtime = "- Process time:\n"
        msgTtime += "  - Start time of the process ......................: "
        msgTtime += initialDateTime.toString("yyyy/MM/dd - hh/mm/ss.zzz")
        msgTtime += "\n"
        msgTtime += "  - End time of the process ........................: "
        msgTtime += finalDateTime.toString("yyyy/MM/dd - hh/mm/ss.zzz")
        msgTtime += "\n"
        msgTtime += "  - Number of total seconds ........................: "
        msgTtime += f"{totalDurationSeconds:.3f}"  # QString.number(totalDurationSeconds, 'f', 3)
        msgTtime += "\n"
        msgTtime += "    - Number of days ...............................: "
        msgTtime += str(durationDays)  # QString.number(durationDays)
        msgTtime += "\n"
        msgTtime += "    - Number of hours ..............................: "
        msgTtime += str(durationHours)  # QString.number(durationHours)
        msgTtime += "\n"
        msgTtime += "    - Number of minutes ............................: "
        msgTtime += str(durationMinutes)  # QString.number(durationMinutes)
        msgTtime += "\n"
        msgTtime += "    - Number of seconds ............................: "
        msgTtime += f"{durationSeconds:.3f}"  # QString.number(durationSeconds, 'f', 3)
        msgTtime += "\n"
        msg = "Process completed successfully"
        msg += "\n"
        msg += msgTtime
        msgBox = QMessageBox(self)
        msgBox.setIcon(QMessageBox.Information)
        msgBox.setWindowTitle(self.windowTitle)
        msgBox.setText(msg)
        msgBox.exec_()

        if ret[1] == "True": #needReloadProject:
            msg = "Before the next step, QGis and the Project must be reopened "
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText(msg)
            msgBox.exec_()

        if self.projectType.lower() == MMTDefinitions.CONST_PROJECT_TYPE_POWERLINE.lower():
            self.loadHazardAreasMshLayer()
            self.loadHazardAreasLayer()
        if self.projectType.lower() == MMTDefinitions.CONST_PROJECT_TYPE_SOLARPARK.lower():
            self.loadPhotovoltaicArrayPanels()
            self.loadPhotovoltaicPanels()
            self.loadPhotovoltaicAnomaliesLayers()
        self.refreshMapCanvas()
        return

    def selectProject(self):
        self.openProjectPushButton.setEnabled(False)
        self.closeProjectPushButton.setEnabled(False)
        projectFileName = self.projectsComboBox.currentText()
        if projectFileName == MMTDefinitions.CONST_NO_COMBO_SELECT:
            self.projectManagementTabWidget.setEnabled(True)
            self.projectManagementTabWidget.setTabEnabled(0, True)
            self.projectManagementTabWidget.setTabEnabled(1, False)
            self.projectManagementTabWidget.setTabEnabled(2, False)
            self.projectManagementTabWidget.setCurrentIndex(0)
            if self.dbFileName:
                self.closeProject()
        else:
            self.projectManagementTabWidget.setEnabled(False)
            # self.projectManagementTabWidget.setTabEnabled(0, False)
            # self.projectManagementTabWidget.setTabEnabled(1, False)
            # self.projectManagementTabWidget.setTabEnabled(2, False)
            self.projectManagementTabWidget.setCurrentIndex(1)
            self.openProjectPushButton.setEnabled(True)
            self.closeProjectPushButton.setEnabled(False)
        return

    def selectProjectManagerOutputPath(self):
        strDir = QFileDialog.getExistingDirectory(self, "Select directory", self.projectManagerOutputPath,
                                                  QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks)
        if strDir:
            ret = self.iPyProject.mmtSetProjectManagerOutputPath(self.projectManagerOutputPath)
            if ret[0] == "False":
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Error:\n" + ret[1])
                msgBox.exec_()
                self.pmOutputPathLineEdit.setText("")
                self.projectManagerOutputPath = None
                return
            self.projectManagerOutputPath = strDir
            self.settings.setValue("project_management_output_path", self.projectManagerOutputPath)
            self.settings.sync()
            self.pmOutputPathLineEdit.setText(strDir)
        return

    def selectProjectManagerTemporalPath(self):
        strDir = QFileDialog.getExistingDirectory(self,"Select directory", self.projectManagerTemporalPath,
                                                  QFileDialog.ShowDirsOnly | QFileDialog.DontResolveSymlinks)
        if strDir:
            ret = self.iPyProject.mmtSetProjectManagerTemporalPath(self.projectManagerTemporalPath)
            if ret[0] == "False":
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Error:\n" + ret[1])
                msgBox.exec_()
                self.pmTemporalPathLineEdit.setText("")
                self.projectManagerTemporalPath = None
                return
            self.projectManagerTemporalPath = strDir
            self.settings.setValue("project_management_temporal_path", self.projectManagerTemporalPath)
            self.settings.sync()
            self.pmTemporalPathLineEdit.setText(strDir)
        return

    def selectProjectParameters(self):
        projectType = self.projectTypeComboBox.currentText()
        if projectType == MMTDefinitions.CONST_NO_COMBO_SELECT:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select project type before")
            msgBox.exec_()
            return
        ret = self.iPyProject.mmtSelectProjectParameters(projectType)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            return
        return

    def selectProjectType(self):
        projectType = self.projectTypeComboBox.currentText()
        # msgBox = QMessageBox(self)
        # msgBox.setIcon(QMessageBox.Information)
        # msgBox.setWindowTitle(self.windowTitle)
        # msgBox.setText("Project type: "+projectType)
        # msgBox.exec_()
        return

    def selectReportReferenceLayerComboBox(self):
        self.referenceLayer = self.reportReferenceLayerComboBox.currentLayer()

    def selectReportArray(self):
        if self.reportArrayComboBox.currentText() == MMTDefinitions.CONST_NO_COMBO_SELECT:
            self.reportHotspotComboBox.clear()
            self.reportPanelComboBox.clear()
            self.reportPanelComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
            self.reportPanelComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_PANELS)
            return
        self.imageFileNamesByHotspotName.clear()
        self.imageFileNamesByPanelByHotspotName.clear()
        self.reportImageComboBox.clear()
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        self.reportPanelComboBox.clear()
        self.reportPanelComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
        self.reportPanelComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_PANELS)
        self.reportHotspotComboBox.clear()
        self.reportHotspotComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
        self.reportHotspotComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_HOT_SPOTS)
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            self.processCommandPushButton.setEnabled(False)
            return
        selectedPhotogrammetryInProject = self.photogrammetriesComboBox.currentText()
        if selectedPhotogrammetryInProject == MMTDefinitions.CONST_NO_COMBO_SELECT:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Photogrammetry Project")
            msgBox.exec_()
            return
        photogrammetrySpatialiteDbFileName = self.photogrammetryConnectionsInProject[selectedPhotogrammetryInProject]
        array = self.reportArrayComboBox.currentText()
        if array != MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_ARRAYS:
            ret = self.iPyProject.mmtGetPhotovoltaicArrayAnomalies(dbFileName,
                                                                   photogrammetrySpatialiteDbFileName,
                                                                   array)
            if ret[0] == "False":
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Error:\n" + ret[1])
                msgBox.exec_()
                self.reportArrayComboBox.setCurrentIndex(0)
                return
            self.imageFileNamesByHotspotName = ret[1]
            self.imageFileNamesByPanelByHotspotName = ret[2]
            for hotspotName in self.imageFileNamesByHotspotName:
                self.reportHotspotComboBox.addItem(hotspotName)
            for panelName in self.imageFileNamesByPanelByHotspotName:
                self.reportPanelComboBox.addItem(panelName)
            # cont = 0
            # for value in ret:
            #     if cont > 0:
            #         self.imageFileNamesByHotspotName = value
            #     cont = cont + 1
            # for hotspotName in self.imageFileNamesByHotspotName:
            #     self.reportHotspotComboBox.addItem(hotspotName)
        return

    def selectReportHotspot(self):
        self.reportImageComboBox.clear()
        selectedHotspot = self.reportHotspotComboBox.currentText()
        if not selectedHotspot:
            return
        if selectedHotspot == MMTDefinitions.CONST_NO_COMBO_SELECT:
            return
        self.reportImageComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
        self.reportImageComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_IMAGES)
        self.reportImageComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_CLOSESTS_IMAGE)
        self.reportImageComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_MOST_ORTHOGONAL_IMAGE)
        if selectedHotspot != MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_HOT_SPOTS:
            array = self.reportArrayComboBox.currentText()
            panel = self.reportPanelComboBox.currentText()
            if panel != MMTDefinitions.CONST_NO_COMBO_SELECT:
                imageFileNames = self.imageFileNamesByPanelByHotspotName[panel][selectedHotspot]
            else:
                imageFileNames = self.imageFileNamesByHotspotName[selectedHotspot]
            for imageFileName in imageFileNames:
                self.reportImageComboBox.addItem(imageFileName)
        return

    def selectReportPanel(self):
        panel = self.reportPanelComboBox.currentText()
        if not panel:
            return
        if panel == MMTDefinitions.CONST_NO_COMBO_SELECT:
            if self.reportArrayComboBox.currentText() == MMTDefinitions.CONST_NO_COMBO_SELECT:
                self.reportHotspotComboBox.clear()
                return
            self.reportHotspotComboBox.clear()
            self.reportHotspotComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
            self.reportHotspotComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_HOT_SPOTS)
            array = self.reportArrayComboBox.currentText()
            if array != MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_ARRAYS:
                for hotspotName in self.imageFileNamesByHotspotName:
                    self.reportHotspotComboBox.addItem(hotspotName)
                return
            return
        if panel != MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_PANELS:
            self.reportHotspotComboBox.clear()
            self.reportHotspotComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
            self.reportHotspotComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_HOT_SPOTS)
            for hotspotName in self.imageFileNamesByPanelByHotspotName[panel]:
                self.reportHotspotComboBox.addItem(hotspotName)
        else:
            self.reportHotspotComboBox.clear()
            self.reportHotspotComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
            self.reportHotspotComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_HOT_SPOTS)
        return

    def selectReportProcess(self):
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        command = self.processCommandComboBox.currentText()
        if command == MMTDefinitions.CONST_NO_COMBO_SELECT:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select command to process")
            msgBox.exec_()
            return
        self.referenceLayer = self.reportReferenceLayerComboBox.currentLayer()
        if not self.referenceLayer:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Load and select reference layer")
            msgBox.exec_()
            return
        selectedPhotogrammetryInProject = self.photogrammetriesComboBox.currentText()
        if selectedPhotogrammetryInProject == MMTDefinitions.CONST_NO_COMBO_SELECT:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Photogrammetry Project")
            msgBox.exec_()
            return
        photogrammetrySpatialiteDbFileName = self.photogrammetryConnectionsInProject[selectedPhotogrammetryInProject]
        imageFileSelected = self.reportImageComboBox.currentText()
        if imageFileSelected == MMTDefinitions.CONST_NO_COMBO_SELECT:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select image to report")
            msgBox.exec_()
            return
        reportType = 'PhHotspot'
        generatedPDFs = []
        if self.reportSelectedFeatureCheckBox.isChecked():
            array = ""
            panel = ""
            hotspot = ""
            imageFileName = imageFileSelected
            if not self.pvAnomaliesVLayer:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Photovoltaic array panels anomalies Layer is not loaded")
                msgBox.exec_()
                return
            if not self.pvAnomaliesPanelsVLayer:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Photovoltaic panels anomalies layer is not loaded")
                msgBox.exec_()
                return
            numberOfSelectedAnomalies = self.pvAnomaliesVLayer.selectedFeatureCount()
            numberOfSelectedAnomaliesPanel = self.pvAnomaliesPanelsVLayer.selectedFeatureCount()
            if (numberOfSelectedAnomalies > 0 and numberOfSelectedAnomaliesPanel > 0) or numberOfSelectedAnomalies > 1 or numberOfSelectedAnomaliesPanel > 1 or (numberOfSelectedAnomalies == 0 and numberOfSelectedAnomaliesPanel == 0):
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Select only one array anomaly or one panel anomaly")
                msgBox.exec_()
                return
            if numberOfSelectedAnomalies == 1:
                anomalyFeature = self.pvAnomaliesVLayer.selectedFeatures()[0]
                idx = self.pvAnomaliesVLayer.dataProvider().fieldNameIndex(MMTDefinitions.CONST_SPATIALITE_LAYERS_PHOTOVOLTAIC_PV_ANOMALIES_TABLE_NAME_FIELD_NAME)
                hotspot = anomalyFeature.attributes()[idx]
            if numberOfSelectedAnomaliesPanel == 1:
                anomalyPanelFeature = self.pvAnomaliesPanelsVLayer.selectedFeatures()[0]
                idx = self.pvAnomaliesPanelsVLayer.dataProvider().fieldNameIndex(MMTDefinitions.CONST_SPATIALITE_LAYERS_PHOTOVOLTAIC_PV_ANOMALIES_PANELS_TABLE_NAME_FIELD_NAME)
                hotspot = anomalyPanelFeature.attributes()[idx]
            ret = self.iPyProject.mmGetArrayPanelAndPanelFromAnomalyName(dbFileName,
                                                                         hotspot)
            if ret[0] == "False":
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Error:\n" + ret[1])
                msgBox.exec_()
                self.reportArrayComboBox.setCurrentIndex(0)
            array = ret[1]
            panel = ret[2]
            imagesToProcess = []
            if imageFileSelected == MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_IMAGES:
                ret = self.iPyProject.mmGetImagesForPhotovoltaicAnomaly(dbFileName,
                                                                        photogrammetrySpatialiteDbFileName,
                                                                        array,
                                                                        panel,
                                                                        hotspot)
                if ret[0] == "False":
                    msgBox = QMessageBox(self)
                    msgBox.setIcon(QMessageBox.Information)
                    msgBox.setWindowTitle(self.windowTitle)
                    msgBox.setText("Error:\n" + ret[1])
                    msgBox.exec_()
                    self.reportArrayComboBox.setCurrentIndex(0)
                images = ret[1]
                for image in images:
                    imagesToProcess.append(image)
            else:
                imagesToProcess.append(imageFileSelected)
            for imageFileName in imagesToProcess:
                ret = self.iPyProject.mmGetPhotovoltaicAnomalyReportData(dbFileName,
                                                                         photogrammetrySpatialiteDbFileName,
                                                                         array,
                                                                         panel,
                                                                         hotspot,
                                                                         imageFileName)
                if ret[0] == "False":
                    msgBox = QMessageBox(self)
                    msgBox.setIcon(QMessageBox.Information)
                    msgBox.setWindowTitle(self.windowTitle)
                    msgBox.setText("Error:\n" + ret[1])
                    msgBox.exec_()
                    self.reportArrayComboBox.setCurrentIndex(0)
                else:
                    # msgBox = QMessageBox(self)
                    # msgBox.setIcon(QMessageBox.Information)
                    # msgBox.setWindowTitle(self.windowTitle)
                    # msgBox.setText(str(self.dbFileName))
                    # msgBox.exec_()
                    self.reportArrayComboBox.setCurrentIndex(0)
                    report = Report(self.iface,
                                    self.path_plugin,
                                    self.dbFileName,
                                    reportType,
                                    ret,
                                    self.crsEpsgCode,
                                    hotspot,
                                    self.referenceLayer,
                                    self.mapPanel)
                    if not report:
                        msgBox = QMessageBox(self)
                        msgBox.setIcon(QMessageBox.Warning)
                        msgBox.setWindowTitle(self.windowTitle)
                        msgBox.setText("Report " + imageFileName + " not created")
                        msgBox.exec_()
                    filenameOutput = hotspot + '_' + ret[2][5] + '.pdf'
                    fileNamePathOutput = os.path.join(ret[2][0], filenameOutput)
                    generatedPDFs.append(fileNamePathOutput)
        else:
            selectedArray = self.reportArrayComboBox.currentText()
            if selectedArray == MMTDefinitions.CONST_NO_COMBO_SELECT:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Select array to report or all panels")
                msgBox.exec_()
                return
            selectedHotspot = self.reportHotspotComboBox.currentText()
            if selectedHotspot == MMTDefinitions.CONST_NO_COMBO_SELECT:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("Select hot spot to report")
                msgBox.exec_()
                return
            arraysToProcess = []
            if selectedArray == MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_ARRAYS:
                for array in self.arrays:
                    arraysToProcess.append(array)
            else:
                arraysToProcess.append(selectedArray)
            for array in arraysToProcess:
                hotspotToProcess = []
                panelByHotspot = {}
                selectedPanel = self.reportPanelComboBox.currentText()
                if selectedPanel == MMTDefinitions.CONST_NO_COMBO_SELECT:
                    if selectedHotspot == MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_HOT_SPOTS:
                        ret = self.iPyProject.mmtGetPhotovoltaicArrayAnomalies(dbFileName,
                                                                           photogrammetrySpatialiteDbFileName,
                                                                           array)
                        if ret[0] == "False":
                            msgBox = QMessageBox(self)
                            msgBox.setIcon(QMessageBox.Information)
                            msgBox.setWindowTitle(self.windowTitle)
                            msgBox.setText("Error:\n" + ret[1])
                            msgBox.exec_()
                            self.reportArrayComboBox.setCurrentIndex(0)
                            return
                        cont = 0
                        for value in ret:
                            if cont > 0:
                                self.imageFileNamesByHotspotName = value
                            cont = cont + 1
                        for hotspotName in self.imageFileNamesByHotspotName:
                            hotspotToProcess.append(hotspotName)
                            panelByHotspot[hotspotName] = ""
                    else:
                        hotspotToProcess.append(selectedHotspot)
                        panelByHotspot[selectedHotspot] = ""
                else:
                    if selectedPanel == MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_PANELS:
                        for panel in self.imageFileNamesByPanelByHotspotName:
                            for hotspotName in self.imageFileNamesByPanelByHotspotName[panel]:
                                hotspotToProcess.append(hotspotName)
                                panelByHotspot[hotspotName] = panel
                    else:
                        if selectedHotspot == MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_HOT_SPOTS:
                            for hotspotName in self.imageFileNamesByPanelByHotspotName[selectedPanel]:
                                hotspotToProcess.append(hotspotName)
                                panelByHotspot[hotspotName] = selectedPanel
                        else:
                            hotspotToProcess.append(selectedHotspot)
                            panelByHotspot[selectedHotspot] = selectedPanel
                for hotspot in hotspotToProcess:
                    panel = panelByHotspot[hotspot]
                    imagesToProcess = []
                    if imageFileSelected == MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_IMAGES:
                        if not panel:
                            for image in self.imageFileNamesByHotspotName[hotspot]:
                                imagesToProcess.append(image)
                        else:
                            for image in self.imageFileNamesByPanelByHotspotName[panel][hotspot]:
                                imagesToProcess.append(image)
                    else:
                        imagesToProcess.append(imageFileSelected)
                    for imageFileName in imagesToProcess:
                        ret = self.iPyProject.mmGetPhotovoltaicAnomalyReportData(dbFileName,
                                                                                 photogrammetrySpatialiteDbFileName,
                                                                                 array,
                                                                                 panel,
                                                                                 hotspot,
                                                                                 imageFileName)
                        if ret[0] == "False":
                            msgBox = QMessageBox(self)
                            msgBox.setIcon(QMessageBox.Information)
                            msgBox.setWindowTitle(self.windowTitle)
                            msgBox.setText("Error:\n" + ret[1])
                            msgBox.exec_()
                            self.reportArrayComboBox.setCurrentIndex(0)
                        else:
                            report = Report(self.iface,
                                            self.path_plugin,
                                            reportType,
                                            ret,
                                            self.crsEpsgCode,
                                            hotspot,
                                            self.referenceLayer,
                                            self.mapPanel)
                            if not report:
                                msgBox = QMessageBox(self)
                                msgBox.setIcon(QMessageBox.Warning)
                                msgBox.setWindowTitle(self.windowTitle)
                                msgBox.setText("Report " + imageFileName + " not created")
                                msgBox.exec_()
                            filenameOutput = hotspot + '_' + ret[2][5] + '.pdf'
                            fileNamePathOutput = os.path.join(ret[2][0], filenameOutput)
                            generatedPDFs.append(fileNamePathOutput)
        if len(generatedPDFs) == 1:
            os.startfile(generatedPDFs[0])
        else:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Process completed successfully: "+str(len(generatedPDFs))+' reports generated')
            msgBox.exec_()

    def selectReportSelectedFeature(self):
        self.reportImageComboBox.clear()
        if self.reportSelectedFeatureCheckBox.isChecked():
            if not self.pvAnomaliesPanelsVLayer:
                msgBox = QMessageBox(self)
                msgBox.setIcon(QMessageBox.Information)
                msgBox.setWindowTitle(self.windowTitle)
                msgBox.setText("There are no photovoltaic anomalies in project")
                msgBox.exec_()
                self.reportSelectedFeatureCheckBox.setChecked(False)
            self.reportArrayComboBox.setCurrentIndex(0)
            self.reportArrayComboBox.setEnabled(False)
            self.reportPanelComboBox.setCurrentIndex(0)
            self.reportPanelComboBox.setEnabled(False)
            self.reportHotspotComboBox.setCurrentIndex(0)
            self.reportHotspotComboBox.setEnabled(False)
            self.reportImageComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)
            self.reportImageComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_ALL_IMAGES)
            self.reportImageComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_CLOSESTS_IMAGE)
            self.reportImageComboBox.addItem(MMTDefinitions.CONST_SOLARPARK_REPORT_HOT_SPOTS_MOST_ORTHOGONAL_IMAGE)
            self.reportImageComboBox.setCurrentIndex(0)
            # self.reportImageComboBox.setEnabled(True)
        else:
            self.reportArrayComboBox.setCurrentIndex(0)
            self.reportArrayComboBox.setEnabled(True)
            self.reportPanelComboBox.setCurrentIndex(0)
            self.reportPanelComboBox.setEnabled(True)
            self.reportHotspotComboBox.setCurrentIndex(0)
            self.reportHotspotComboBox.setEnabled(True)
            # self.reportImageComboBox.setCurrentIndex(0)
            # self.reportImageComboBox.setEnabled(True)
        return

    def selectRois(self):
        previousFiles = self.roisShapefiles[:] # copia desligada
        dlg = MultipleFileSelectorDialog(self.iface,
                                         self.path,
                                         MMTDefinitions.CONST_SELECT_ROIS_SHAPEFILES_DIALOG_TITLE,
                                         self.roisFileTypes,
                                         self.roisShapefiles,
                                         self.roisFilesActiveFileExtensions)
        dlg.show() # show the dialog
        result = dlg.exec_() # Run the dialog
        self.path = dlg.getPath()
        self.settings.setValue("last_path",self.path)
        files = dlg.getFiles() # los hay repetidos
        self.roisShapefiles = []
        self.numberOfRoisLineEdit.setText("0")
        for file in files:
            fileBaseName = QFileInfo(file).baseName()
            findFile = False
            for roiFile in self.roisShapefiles:
                if fileBaseName == QFileInfo(roiFile).baseName():
                    findFile = True
                    break
            if not findFile:
                self.roisShapefiles.append(file)
        self.roisFilesActiveFileExtensions = dlg.getActiveFileExtensions()
        self.numberOfRoisLineEdit.setText(str(len(self.roisShapefiles)))
        return

    def selectSPSFFields(self):
        # self.spsfProcessPushButton.setEnabled(False)
        if self.projectType.lower() == MMTDefinitions.CONST_PROJECT_TYPE_POWERLINE.lower():
            return
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        if len(self.solarParkFiles) != 1:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select one solar park shapefile")
            msgBox.exec_()
            return
        solarParkShapefile = self.solarParkFiles[0]
        ret = self.iPyProject.mmtSelectSolarParkShapefileFields(dbFileName,
                                                                solarParkShapefile)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            return
        else:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Process completed successfully")
            msgBox.exec_()
        selectFieldsIsCompleted=ret[1]
        # if selectFieldsIsCompleted == "False":
        #     msgBox = QMessageBox(self)
        #     msgBox.setIcon(QMessageBox.Information)
        #     msgBox.setWindowTitle(self.windowTitle)
        #     msgBox.setText("Field selection has not been completed. You must do it before importing it")
        #     msgBox.exec_()
        # else:
        #     self.spsfProcessPushButton.setEnabled(True)
        return

    def selectSPSFs(self):
        if self.projectType.lower() == MMTDefinitions.CONST_PROJECT_TYPE_POWERLINE.lower():
            return
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        self.spsfProcessPushButton.setEnabled(False)
        previousFiles = self.solarParkFiles[:] # copia desligada
        previousFile = None
        if len(previousFiles) == 1:
            previousFile = previousFiles[0]
        dlg = MultipleFileSelectorDialog(self.iface,
                                         self.path,
                                         MMTDefinitions.CONST_SELECT_POWER_LINES_FILES_DIALOG_TITLE,
                                         self.solarParkFilesFileTypes,
                                         self.solarParkFiles,
                                         self.solarParkFilesActiveFileExtensions)
        dlg.show() # show the dialog
        result = dlg.exec_() # Run the dialog
        self.path = dlg.getPath()
        self.settings.setValue("last_path",self.path)
        files = dlg.getFiles() # los hay repetidos
        self.solarParkFiles = []
        self.numberOfSPSFsLineEdit.setText("0")
        for file in files:
            fileBaseName = QFileInfo(file).baseName()
            findFile = False
            for pointCloudFile in self.solarParkFiles:
                if fileBaseName == QFileInfo(pointCloudFile).baseName():
                    findFile = True
                    break
            if not findFile:
                self.solarParkFiles.append(file)
        if len(self.solarParkFiles)>1:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Only one shapefile file is allowed in the current version")
            msgBox.exec_()
            self.selectSPSFs()
            return
        self.solarParkFilesActiveFileExtensions = dlg.getActiveFileExtensions()
        self.numberOfSPSFsLineEdit.setText(str(len(self.solarParkFiles)))
        if len(self.solarParkFiles)==1:
            self.spdSelectSFFieldsPushButton.setEnabled(True)
            self.spsfProcessPushButton.setEnabled(True)
            currentFile = self.solarParkFiles[0]
            if previousFile:
                if currentFile != previousFile:
                    ret = self.iPyProject.mmtClearSolarParkShapefileFields(dbFileName)
                    if ret[0] == "False":
                        msgBox = QMessageBox(self)
                        msgBox.setIcon(QMessageBox.Information)
                        msgBox.setWindowTitle(self.windowTitle)
                        msgBox.setText("Error:\n" + ret[1])
                        msgBox.exec_()
                        return
                    self.spdSelectSFFieldsPushButton.setEnabled(False)
                    self.spsfProcessPushButton.setEnabled(False)
        if len(self.solarParkFiles)==0:
            if previousFile:
                ret = self.iPyProject.mmtClearSolarParkShapefileFields(dbFileName)
                if ret[0] == "False":
                    msgBox = QMessageBox(self)
                    msgBox.setIcon(QMessageBox.Information)
                    msgBox.setWindowTitle(self.windowTitle)
                    msgBox.setText("Error:\n" + ret[1])
                    msgBox.exec_()
                    return
            self.spdSelectSFFieldsPushButton.setEnabled(False)
            self.spsfProcessPushButton.setEnabled(False)
        return

    # def selectUpdateReferenceLayers(self):
    #     self.reportReferenceLayerComboBox.clear()
    #     self.reportReferenceLayerComboBox.addItem(MMTDefinitions.CONST_NO_COMBO_SELECT)

    def spsfProcess(self):
        if self.projectType.lower() == MMTDefinitions.CONST_PROJECT_TYPE_POWERLINE.lower():
            return
        dbFileName = self.modelManagementConnections[self.projectsComboBox.currentText()]
        if not dbFileName:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select Db file")
            msgBox.exec_()
            return
        if len(self.solarParkFiles) != 1:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Select one solar park shapefile")
            msgBox.exec_()
            return
        solarParkShapefile = self.solarParkFiles[0]
        altitudeIsMsl = True
        if self.plsfAltitudeEllipsoidRadioButton.isChecked():
            altitudeIsMsl = False
        ret = self.iPyProject.mmtSolarParkDefinition(dbFileName,
                                                     solarParkShapefile,
                                                     altitudeIsMsl)
        if ret[0] == "False":
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Error:\n"+ret[1])
            msgBox.exec_()
            return
        else:
            msgBox = QMessageBox(self)
            msgBox.setIcon(QMessageBox.Information)
            msgBox.setWindowTitle(self.windowTitle)
            msgBox.setText("Process completed successfully")
            msgBox.exec_()
        # self.loadElectricPylonsLayer()
        return